#!/bin/sh

# This script is meant to be run from cron. It:
#   - finds torrents under a directory (including its subdirectories) and
#     adds them to transmission, specifying the directory from where the
#     torrent was located to be the completed directory for the data
#   - throttles public torrents
#   - removes certain "bad" trackers from torrents
#   - labels files of seeding torrents
#   - removes completed, stopped torrents
#   - verifies RAR archives with cksfv
#   - unrars RAR archives
#   - removes RAR archives after torrent has been removed
#
# TODO:
#   - log messages to syslog with `logger` if available
#   - use getopts to accept command-line options
#   - kill transmission if it's hanging so it can be restarted by some
#     external process (launchd, inetd, etc.)

WATCH_DIR=$HOME/Media/.
ZOMBIE_DIR=$HOME/Media/.zombies/.
SEED_DIR=$HOME/Media/.seeds/.
NETRC=$HOME/.netrc
GROWL_ARGS=

PROG=${0##*/}
LOCK="/tmp/$PROG.lock"
LOG="/tmp/$PROG.log"

PUBLIC_UP_RATE=2
PUBLIC_RATIO=0

set -o errexit
set -o nounset

has_cmd () { command -v "$@" >/dev/null 2>&1; }

if has_cmd flock; then
    flock -nx "$LOCK" || exit
else
    trap 'status=$?; rm -f "$LOCK"; exit $status' HUP INT QUIT TERM
    if has_cmd shlock; then
        shlock -f "$LOCK" -p $$ || exit
    elif has_cmd lockfile; then
        lockfile -r 0 -l 300 "$LOCK" >/dev/null 2>&1 || exit
    else
        ln -s /dev/null "$LOCK" 2>/dev/null || exit
    fi
    trap 'rm -f "$LOCK"; exit' EXIT
fi

if has_cmd growlnotify; then
    growl () {
        growlnotify -t "$PROG" $GROWL_ARGS -m "$@" >/dev/null 2>&1
        return 0
    }
else
    growl () { :; }
fi
log () {
    printf "[%s] %s\n" "$(date +%F\ %T)" "$@" >>"$LOG"
    [ -t 0 ] && printf "%s\n" "$@"
    return 0
}
err () {
    printf "[%s] %s\n" "$(date +%F\ %T)" "$@" >>"$LOG" 2>&1
    [ -t 1 ] && printf "%s\n" "$@" >&2
    # Make error notifications sticky.
    SAVED_GROWL_ARGS=$GROWL_ARGS; GROWL_ARGS="$GROWL_ARGS -s"
    growl "$@"
    GROWL_ARGS=$SAVED_GROWL_ARGS
}

real_dir () {
    _real_dir=
    cd -P -- "$1" 2>/dev/null && _real_dir=$(pwd -P)
}

real_dir "$WATCH_DIR" && WATCH_DIR=$_real_dir || {
    err "WATCH_DIR directory $WATCH_DIR does not exist"
    exit -1
}
mkdir -p "$ZOMBIE_DIR" "$SEED_DIR"
real_dir "$ZOMBIE_DIR" && ZOMBIE_DIR=$_real_dir
real_dir "$SEED_DIR" && SEED_DIR=$_real_dir

if   has_cmd timeout; then :
elif has_cmd gtimeout; then timeout () { gtimeout "$@"; }
else
    timeout () {
        timeout=$1
        shift
        "$@" &
        child_pid=$!
        (
            sleep "$timeout" &
            sleep_pid=$!
            trap 'kill -s TERM $sleep_pid 2>/dev/null; exit 0' TERM
            wait $sleep_pid 2>/dev/null
            kill -s TERM $child_pid 2>/dev/null
            sleep 2
            kill -s KILL $child_pid 2>/dev/null
        ) &
        alarm_pid=$!
        wait $child_pid 2>/dev/null
        status=$?
        kill -s TERM $alarm_pid 2>/dev/null
        return $status
    }
fi

remote () {
    # TODO: add retry and kill logic
    exec 3>&1 4>&2
    if ! remote_error=$(
        { timeout 30 transmission-remote 127.0.0.1 -N "$NETRC" "$@" 2>&4 1>&3; } 4>&1
    ); then
        case $remote_error in
            *"Couldn't connect to server")
                err "$remote_error"
                exit 1
        esac
    fi
    exec 3>&- 4>&-
    printf "$remote_error" >&2
}

IFS=$(printf "\n\t")

# Add any new torrent files to transmission.
# Only recurse into the TV and Movies directories.
for file in $(
    find "$WATCH_DIR" -type d \( -path "$WATCH_DIR/TV" -o                \
        -path "$WATCH_DIR/TV/*" -o -path "$WATCH_DIR/Movies" -o          \
        -path "$WATCH_DIR/Movies/*" -o -path "$WATCH_DIR/*" -prune \) -o \
        \( -type f -name '*.[Tt][Oo][Rr][Rr][Ee][Nn][Tt]' \! -size 0 \)  \
        -print 2>/dev/null
)
do
    dir=${file%/*}

    # Until flexget can filter series premieres via tvrage, add these as
    # paused, so they can be manually started or deleted.
    state=--start
    if [ "$dir" = "$WATCH_DIR"/TV/_NEW_ ]; then
        state=--stop
    fi

    # Parse the debug output.
    # Use the torrent hash because the ids are not persistent across sessions.
    result=
    response=$(remote --debug --add "$file" $state --download-dir "$dir" 2>&1)
    for line in $response; do
        case $line in '{"arguments":{'*'"result":'*) result=$line; esac
    done

    case $result in
        '') continue ;;
        '{"arguments":{"torrent-added":{"hashString":'*)
            SAVED_IFS=$IFS; IFS='"'; set -- $result; IFS=$SAVED_IFS
            hash=$8
            rm -f "$file" ;;
        # Probably a duplicate torrent.
        *'"result":"success"'*)
            rm -f "$file"
            continue ;;
        *)
            SAVED_IFS=$IFS; IFS='"'; set -- $result; IFS=$SAVED_IFS
            err "$6: $file"
            mv -f "$file" "$file.failed"
            continue
    esac

    for line in $(remote --torrent "$hash" --info); do
        case $line in
            '  Public torrent: '?*) public=${line#*: } ;;
            '  Name: '?*)           name=${line#*: }
        esac
    done

    log "Added torrent: $name"
    growl "Added torrent: $name"

    force_public=0
    for line in $(remote --torrent "$hash" --info-trackers); do
        SAVED_IFS=$IFS; IFS=' :/'; set -- $line; IFS=$SAVED_IFS
        [ 6 -le $# ] && [ Tracker = $1 ] || continue
        id=$2 tracker=$6
        case $id in '' | *[!0-9]*) continue; esac
        case $tracker in
            tracker.openbittorrent.com | \
            inferno.demonoid.*         | \
            *.prq.to                   | \
            *.1337x.org                | \
            www.mvgroup.org)
                force_public=1 ;;
            *.ccc.de                   | \
            *.hexagon.cc               | \
            *.thepiratebay.org         | \
            *.onion                    | \
            *.tor2web.com)
                remote --torrent "$hash" --tracker-remove "$id" >/dev/null
        esac
    done

    if [ Yes = "$public" ] || [ 1 = "${force_public:-0}" ]; then
        # Throttle torrent.
        remote --torrent "$hash" --uplimit "$PUBLIC_UP_RATE" \
            --seedratio "$PUBLIC_RATIO" >/dev/null
        # Add some public trackers.
        for tracker in tracker.openbittorrent.com:80                       \
            tracker.istole.it:80 open.demonii.com:1337 tracker.btzoo.eu:80 \
            tracker.coppersurfer.tk:6969 tracker.leechers-paradise.org:6969;
        do
            remote --torrent "$hash" --tracker-add \
                udp://${tracker}/announce >/dev/null
        done
    fi
done

has_cmd unrar && HAS_UNRAR=1 || HAS_UNRAR=0
has_cmd cksfv && HAS_CKSFV=1 || HAS_CKSFV=0

# Mark files a different color in Finder to indicate they are finished
# seeding and can safely be deleted.
case $OSTYPE in
    darwin*)
        # 10.9 allows multiple tags; don't clear other tags when adding.
        if has_cmd tag; then
            hilite () { tag --descend --add red "$@" 2>/dev/null 2>&1; }
        else
            attr=0000000000000000000C00000000000000000000000000000000000000000000
            hilite () {
                xattr -r -wx com.apple.FinderInfo $attr "$@" 2>/dev/null 2>&1
            }
        fi
        ;;
    *) hilite () { :; }
esac

for line in $(remote --torrent all --info); do
    val=${line#*: }
    case $line in
        '  Name: '?*)                  name=$val          ;;
        '  Hash: '?*)                  hash=$val          ;;
        '  State: '?*)                 state=$val         ;;
        '  Location: '?*)              dir=$val           ;;
        '  Percent Done: '?*)          percent=$val       ;;
        '  Tracker gave an error: '?*) tracker_error=$val ;;
        '  Upload Limit: '?*)          up_limit=$val
                                       do=1
    esac

    [ 1 != "${do:-0}" ] && continue
    do=0

    [ '100%' != "$percent" ] && continue
    case $state in Verifying*) continue; esac

    # Verify directory is valid and in expected location.
    real_dir "$dir" && dir=$_real_dir || dir=

    case ${tracker_error-} in
        [Uu]'nregistered torrent' | \
        [Tt]'orrent is not authorized for use on this tracker')
            log "Stopped unregistered torrent: $name"
            state=Finished; tracker_error=
    esac

    # Data was likely prematurely removed; remove torrent when finished.
    if [ -z "$dir" ] || [ ! -e "$dir/$name" ]; then
        if [ Finished = "$state" ]; then
            remote --torrent "$hash" --remove >/dev/null
            log "Removed torrent: $name"
        fi
        continue
    fi

    case $dir/ in
        "$ZOMBIE_DIR"/*)
            if [ Finished = "$state" ]; then
                remote --torrent "$hash" --remove-and-delete >/dev/null
                log "Removed zombie torrent and data: $name"
            fi
            continue ;;
        "$SEED_DIR"/*)
            if [ Finished = "$state" ]; then
                remote --torrent "$hash" --remove-and-delete >/dev/null
                log "Removed seed: $name"
            fi
            continue ;;
        "$WATCH_DIR"/*) ;;
        *) continue
    esac

    # Make this is a zombie torrent. Keep the torrent alive and pretend to
    # be seeding it to earn tracker credit. Hide the torrent data after all
    # the media files have been viewed and truncated.
    if [ 0 = "${up_limit%% *}" ] \
        && [ -z "$(find $dir/$name -type f -size +0 2>/dev/null)" ]
    then
        ! find "$dir/$name" -type f -name '*.unrarred' -exec rm -f {} + \
            2>/dev/null
        remote --torrent "$hash" --move "$ZOMBIE_DIR" >/dev/null
        log "Moving data for zombified torrent: $name"
    fi

    last_dir=; last_file_base=; has_rar=0

    # Multiple torrents could write to the same location, so a single lock
    # file per torrent location will not suffice; each RAR archive requires
    # its own lock file.
    if [ 1 = $HAS_UNRAR ]; then
        for file in $(find "$dir/$name" -type f -name *.[Rr][Aa][Rr] 2>/dev/null); do
            has_rar=1
            rar_dir=${file%/*}
            rar_file=${file##*/}
            rar_file_base=${rar_file%.*}
            case "${rar_file_base##*.}" in
                part[0-9]*) rar_file_base=${rar_file_base%.*}
            esac

            if [ "$rar_dir" = "$last_dir" ]; then
                # Skip parts of last processed RAR archive.
                [ "$rar_file_base" = "$last_file_base" ] && continue
            fi
            last_dir=$rar_dir
            last_file_base=$rar_file_base
            unrarred_lock=$rar_dir/.$rar_file_base.unrarred
            [ -e "$unrarred_lock" ] && continue

            sfv_file=$rar_file_base.sfv
            display_path=${rar_dir##$WATCH_DIR/}/$rar_file
            if [ 1 = $HAS_CKSFV ] && [ -e "$rar_dir/$sfv_file" ]; then
                if ! cksfv -qg "$rar_dir/$sfv_file"; then
                    touch "$unrarred_lock"
                    err "Invalid RAR: $display_path"
                    continue
                fi
            fi

            log "Unrarring $display_path"

            touch "$unrarred_lock"
            if ! unrar x -inul -y -p- -o+ -r -ai -ts- -- "$rar_dir/$rar_file" "$rar_dir"
            then
                err "Unable to extract RAR: $display_path"
                continue
            fi

            log "Unrarred $display_path"

            for path in $(unrar lb -- "$rar_dir/$rar_file"); do
                ! hilite "$rar_dir/$path"
            done
        done
    fi

    [ Finished = "$state" ] || continue

    # Remove each of the RAR files listed in the torrent.
    # NOTE: this assumes files are returned alphabetically sorted.
    if [ 1 = $has_rar ]; then
        count=0; last_dir=; last_file_base=
        remote --torrent "$hash" --files |
        while IFS=' ' read -r _ _ _ _ _ _ file; do
            # Skip header lines
            [ $count -lt 2 ] && count=$((count+1)) && continue

            # Skip any non-RAR file.
            case $file in
                *.rar|*.sfv|*.r[0-9]|*.r[0-9][0-9]|*.r[0-9][0-9][0-9]) ;;
                *) continue
            esac

            # Verify directory is valid and in expected location.
            rar_dir=$dir/${file%/*}
            real_dir "$rar_dir" && rar_dir=$_real_dir || rar_dir=
            case $rar_dir/ in "$WATCH_DIR"/*) ;; *) continue; esac

            # Remove RAR part.
            rar_file=${file##*/}
            rm -f "$rar_dir/$rar_file"

            # Remove RAR lock file.
            rar_file_base=${rar_file%.*}
            case "${rar_file_base##*.}" in
                part[0-9]*) rar_file_base=${rar_file_base%.*}
            esac
            if [ "$rar_dir" = "$last_dir" ]; then
                # Skip parts of last processed RAR archive.
                [ "$rar_file_base" = "$last_file_base" ] && continue
            fi
            last_dir=$rar_dir
            last_file_base=$rar_file_base
            rm -f "$rar_dir/.$rar_file_base.unrarred"
        done
        log "Removed RAR: $name"
    fi

    ! hilite "$dir/$name"

    if [ -d "$dir/$name" ]; then
        ! find "$dir/$name" -type f \(                               \
            -name *.message -o -name *.localized -o -name *.part -o  \
            -name *.url -o -name *.[Dd][Ii][Zz] -o -name *.sfv -o    \
            -name '*.[Tt][Oo][Rr][Rr][Ee][Nn][Tt]'                   \
        \) -exec rm -f {} + 2>/dev/null

        # Only keep subtitles for foreign videos.
        is_video_dir=
        case $dir/ in
            "$WATCH_DIR"/TV/Foreign/* | "$WATCH_DIR"/Movies/Foreign/*)
                is_video_dir=1 ;;
            "$WATCH_DIR"/TV/* | "$WATCH_DIR"/Movies/*)
                is_video_dir=1
                ! find "$dir/$name/" \(                                 \
                    \( -type d \(                                       \
                        -name [Ss][Uu][Bb][Ss] -o                       \
                        -name [Ss][Uu][Bb][Tt][Ii][Tt][Ll][Ee][Ss]      \
                    \) -prune \) -o                                     \
                    \( -type f \(                                       \
                        -name '*.srt' -o -name '*.idx' -o -name '*.sub' \
                    \) \) \)  -exec rm -rf {} + 2>/dev/null
        esac

        if [ $is_video_dir ]; then
            ! find "$dir/$name" \(                                      \
                \( -type d -name [Ss][Aa][Mm][Pp][Ll][Ee] -prune \) -o  \
                \( -type f \(                                           \
                    -name *.[Tt][Xx][Tt] -o -name *.[Nn][Ff][Oo] -o     \
                    -name *.[Hh][Tt][Mm][Ll] -o -name *.[Jj][Pp][Gg] -o \
                    -name *.[Jj][Pp][Ee][Gg] -o -name *.[Pp][Nn][Gg] -o \
                    -name *.[Gg][Ii][Ff] -o -name *.[Rr][Tt][Ff] -o     \
                    -name [Ss][Aa][Mm][Pp][Ll][Ee].??? -o               \
                    -name *[/.\ -][Ss][Aa][Mm][Pp][Ll][Ee].??? -o       \
                    -name *\([Ss][Aa][Mm][Pp][Ll][Ee]\).???             \
                \) \) \) -exec rm -rf {} + 2>/dev/null
        fi

        # Move data out of extraneous container directory.
        count=0
        for file in $(find "$dir/$name" -type f); do
            [ .DS_Store = "${file##*/}" ] && continue
            count=$((count+1)) && [ $count -gt 1 ] && break
        done
        if [ $count -eq 1 ]; then
            file_base=${file##*/}
            file_base=${file_base%.*}
            file_ext=${file##*.}
            if [ ${#name} -gt ${#file_base} ]; then
                new_file="$dir/$name.$file_ext"
            else
                new_file="$dir/$file_base.$file_ext"
            fi
            [ ! -f "$new_file" ] && mv -f "$file" "$new_file"
        fi
    fi

    remote --torrent "$hash" --remove >/dev/null
    log "Removed torrent: $name"
done

case $OSTYPE in darwin*)
    ! find "$WATCH_DIR"/Movies/* "$WATCH_DIR"/TV/* -type f \
        -name '.DS_Store' -exec rm -f {} + 2>/dev/null
esac
# Remove empty directories.
! find "$WATCH_DIR"/Movies/* "$WATCH_DIR"/TV/* -type d -depth \
    -exec rmdir {} + 2>/dev/null
