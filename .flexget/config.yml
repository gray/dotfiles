# warnings off

variables: private/variables.yml

templates:
  global:
    cookies: ~/.flexget/private/cookies.sqlite
    download: { path: ~/Downloads/. }
    no_entries_ok: yes
    verify_ssl_certificates: no

  # launchctl load -w  $HOME/Library/LaunchAgents/com.transmissionbt.daemon.plist
  torrents:
    content_filter:
      require: [ '*.avi', '*.mkv', '*.mp4', '*.rar' ]
      reject: [ '*.m2ts', '*.wmv' ]
    # BTN occasionally names torrents as 'No Name.torrent'
    download: { filename: '{{title | pathscrub}}.torrent' }
    # torrent_scrub: on
    # torrent_alive: { min_seeds: 5, reject_for: 10 minutes }
    # exec:
    #   on_output:
    #     phase: |
    #       # This is also run from cron every few minutes.
    #       nice -n 20 transmission-watchdog

  private-torrents:
    template: torrents
    private_torrents: yes

  tv:
    interval: 5 minutes
    content_size: { min: 25, max: 2500 }
    regexp:
      reject:
        - ? '(?x) [\W_] (?: read[\W_]?nfo | (?:fan | horrible) [\W_]? subs
              | cropped | dubbed | sub (?:pack | french )) (?:_|\b)'
          : { from: title }
        # Avoid certain release groups.
        - ? '(?x) [\W_] (?: afg | ajp69 | bge | bt[nw] | cookiemonster
                            | deadpool | doosh | evo | failed | heat | hybris
                            | ion10 | jah | kcrt | kompost | lotv | lucidtv
                            | monkee | msd | ngp | nogr(?:ou)?p | ny2
                            | phoenix | propltv | rbb | sdi | stb | syncopy
                            | tbd | trump | tvc | viethd | visum | [hx]?264
                        ) [\W_]* $'
          : { from: title }
        - ? '(?x) [\W_] (?: CONVERT | INTERNAL ) (?:[\W_] 720p)? [\W_]
                        (?:HDTV | WEB) (?:_|\b)'
          : { from: title }
    if:
      # Reject season previews or recaps.
      - '"ep" == series_id_type and 0 == series_episode':
          regexp:
            reject:
              - ? '(?x) (?:_|\b) (?: preview | trailer
                                     | behind \W+ the \W+ scenes
                                     | catch(?:ing)? \W+ up | first \W+ look
                                     | making \W+ of | sneak \W+ pe[ae]ks? )
                        (?:_|\b)'
                : { from: title }
      # Only accept specials for later seasons.
      - 'not has_field("special_ep0") and "ep" == series_id_type and 0 == series_episode and 1 < series_season':
          regexp:
            reject_excluding:
              # The series plugin doesn't mark episodes as specials.
              - '(?x) (?:_|\b) special (?:_|\b)': { from: title }

      # Reject really old episodes for date-based series,
      - '"date" == series_id_type and 120 <= (now - series_date).days': reject
      # Require subs for non-netflix foreign series, avoid them otherwise.
      - 'path.startswith("~/Media/TV/Foreign/") and not has_field("netflix")':
          regexp:
            reject_excluding:
              - '(?x) \b (?:en)?sub(?:s|bed) \b': { from: title }
            reject: [ '(?x) \b nl \W+ subs \b': { from: title } ]
      - 'not path.startswith("~/Media/TV/Foreign/")':
          regexp:
            reject: [ '(?x) \b (?:en)?sub(?:s|bed) \b': { from: title } ]

  tv-series:
    template: tv
    series:
      settings:
        tv: &TV_SETTING
          exact: yes
          quality: webrip+ <=720p
          propers: 12 hours
          specials: no
          path: ~/Media/TV/{{series_name}}/.
        animation:
          <<: *TV_SETTING
          path: ~/Media/TV/Animation/{{series_name}}/.
        documentaries:
          <<: *TV_SETTING
          path: ~/Media/TV/Documentaries/{{series_name}}/.
        foreign:
          <<: *TV_SETTING
          path: ~/Media/TV/Foreign/{{series_name}}/.
        talk_shows:
          <<: *TV_SETTING
          path: ~/Media/TV/Talk Shows/{{series_name}}/.
    include: [ private/series.yml ]

  # Grab the first episode of any new series.
  tv-premieres:
    template: tv
    series_premiere:
      <<: *TV_SETTING
      allow_seasonless: yes
      path: ~/Media/TV/_NEW_/.
    regexp:
      reject:
        - ? '(?x) (?:_|\b) (?: pdtv | norwegian | hanrel | tgl ) (?:_|\b)'
          : { from: title }
        - '(?x) (?:_|\b) (?: nz | pl | sports | championships? | bak(?:e | ing)
                             | world \W+ series | live \W+ at )
                (?:_|\b)'
        - '(?x) (?:_|\b) (?: australia | brit(?:s | ish | ain | annic?a)?
                             | celebrit | engl(?:and | ish) | kitchen | food
                             | cook | tattoo )'
        - '(?x) chefs?'
      from: series_name

  movies:
    interval: 30 minutes
    quality: webrip+ <=720p
    regexp:
      reject:
        - '\b \d{4} \b .*? \b HC \b'
        - ? '(?x) [\W_] (?: read[\W_]?nfo | 3-?D(?:BD)? | live\W+at
                          | (?:heb|kor|nl|pl|ro|swe)[\W_]?[ds]ub(?:s|bed)?
                          | fan[\W_]edit | dubbed | cropped | subpack )
                  (?:_|\b)'
          : { from: [ title, description ] }
        - '(?x) (?:_|\b) christmas (?:_|\b)'
        # Avoid certain release groups.
        - '(?x) [\W_] (?: aqos | cmrg | cocain | crys | evo | ift | maxspeed
                          | msd | nnd | nogr(?:ou)?p | play[sx]d | santi
                          | ssdd | thc | tnt[\W_]*village | wdr ) [\W_]* $'
        # Flexget doesn't recognize cam or line audio as qualities.
        - '(?x) [\W_] (?: cam[\W_]*audio | line(?:[\W_]*audio)? ) (?:_|\b)'
      from: title
    content_size: { min: 300, max: 2500 }
    imdb_lookup: yes
    require_field: imdb_url
    seen_movies: strict
    if:
      - '(imdb_year or 0) < now.year - 6': reject
      - "'musical' in (imdb_genres or [])": reject
      - "'reality-tv' in (imdb_genres or [])": reject
      - "['drama'] == (imdb_genres or [])": reject
      - "['drama', 'romance'] == (imdb_genres or [])": reject
      - "['music'] == (imdb_genres or [])": reject
      - ? "'music' in (imdb_genres or []) and ('biography' in (imdb_genres or [])
              or 'documentary' in (imdb_genres or []))"
        : reject
      - "['documentary', 'sport'] == (imdb_genres or [])": reject
      # Probably a standup comedy.
      - "'comedy' in (imdb_genres or []) and 1 == (imdb_actors or []) | length":
          reject
      - "'english' == (imdb_languages or ['english'])[0]":
          set: { path: ~/Media/Movies/. }
          imdb:
            min_score: 6.2
            min_votes: 500
      - '1 < (imdb_languages or []) | length':
          set: { path: ~/Media/Movies/Foreign/. }
      - "'documentary' in (imdb_genres or [])":
          set: { path: ~/Media/Movies/Documentaries/. }
      - "'english' != (imdb_languages or ['english'])[0]":
          set:
            path: ~/Media/Movies/Foreign/{{imdb_languages[0] | capitalize}}/.
          imdb:
            min_score: 6.8
            min_votes: 100
            accept_languages: [
              cantonese, danish, dutch, finnish, french, german, icelandic,
              italian, norwegian, japanese, korean, portuguese, spanish,
              swedish
            ]
            accept_genres: [
              action, adventure, comedy, crime, mystery, sci-fi, thriller, war
            ]
            reject_genres: [ documentary ]
          content_filter:
            reject: [ '*.subs.rar-missing' ]

  streams:
    disable: download
    exec:
      fail_entries: yes

tasks:
  ###########
  # TV series
  ###########
  btn:
    priority: 1
    template: [ private-torrents, tv-series ]
    rss:
      url: '{?feeds.btn.url?}'
      silent: yes
      all_entries: no
    manipulate:
      # Use the scene release name.
      - title: { extract: ' \[ ([^[]+) \] *$' }
    # Site doesn't distinguish between dvd and dvd screeners.
    regexp:
      reject:
        - '(?x) \b dvdrip \b': { from: title }
    # if:
    #   - '"anonymous" != author | lower': reject
  xspeeds_tv:
    priority: 2
    template: [ private-torrents, tv-series ]
    rss:
      url: '{?feeds.xspeeds.tv.url?}'
      silent: yes
      all_entries: no
    # Only accept scene torrents here- members often mislabel.
    regexp:
      reject_excluding:
        - '(?x) ^ (?: XSbot\d\* | LaylaXS) $': { from: author }
  torrentday_tv:
    priority: 3
    template: [ private-torrents, tv-series ]
    rss:
      url: '{?feeds.torrentday.tv.url?}'
      silent: yes
      all_entries: no
    regexp:
      reject_excluding:
        - '(?x) [hx]\ ? 264 - \w+ $': { from: title }

  #####################
  # TV series premieres
  #####################
  btn_premieres:
    priority: 20
    template: [ private-torrents, tv-premieres ]
    rss:
      url: '{?feeds.btn.url?}'
      silent: yes
      all_entries: no
      other_fields: [ comments ]
    manipulate:
      - year: { from: title, extract: '^[^[]+\[ (\d{4}) \]' }
      - foreign: { from: title, extract: '\| (Foreign) \]' }
      # Use the scene release name.
      - old_title: { from: title }
      - title: { extract: ' \[ ([^[]+) \] *$' }
    regexp:
      reject:
        # Site doesn't distinguish between dvd and dvd screeners.
        - '(?x) \b dvdrip \b': { from: title }
        - '(?x) [\W_] kor $': { from: title }
        - ? '(?x) \b (?: anime | celebrities | children | cooking | dance
                         | dating | fashion | food | gameshow | homeandgarden
                         | lifestyle | music | reality | soap
                         | specialinterest | sports? | talkshow
                     ) \b'
          : { from: comments }
    if:
      # Accept only the current year, respecting dates near the boundary.
      - ? 'not year.isdigit() or year | int < (now - timedelta(days=60)).year
              or year | int > (now + timedelta(days=60)).year'
        :  reject
      - '"foreign" == foreign | lower':
          set: { path: ~/Media/TV/Foreign/_NEW_/. }

  xspeeds_tv_premieres:
    manual: yes
    priority: 21
    template: [ private-torrents, tv-premieres ]
    rss:
      url: '{?feeds.xspeeds.tv.url?}'
      silent: yes
      all_entries: no
    # Only accept scene torrents here- members often mislabel.
    regexp:
      reject_excluding:
        - '(?x) ^ (?: XSbot\d\* | LaylaXS) $': { from: author }
  torrentday_tv_premieres:
    manual: yes
    priority: 22
    template: [ private-torrents, tv-premieres ]
    rss:
      url: '{?feeds.torrentday.tv.url?}'
      silent: yes
      all_entries: no
    regexp:
      reject_excluding:
        - '(?x) [hx]\ ? 264 - \w+ $': { from: title }

  ########
  # Movies
  ########
  xspeeds_movies:
    priority: 31
    template: [ private-torrents, movies ]
    rss:
      url: '{?feeds.xspeeds.movies.url?}'
      silent: yes
      all_entries: no
    # Only accept scene torrents here- members often mislabel.
    regexp:
      reject_excluding:
        - '(?x) ^ (?: XSbot\d\* | LaylaXS) $': { from: author }
  torrentday_movies:
    priority: 32
    template: [ private-torrents, movies ]
    rss:
      url: '{?feeds.torrentday.movies.url?}'
      silent: yes
      all_entries: no
    regexp:
      reject_excluding:
        - '(?x) (?:[hx]\ ? 264 | xvid) - \w+ $': { from: title }

  ##########
  # Streams
  ##########
  '{?streams.1.task?}':
    interval: 1 hour
    template: streams
    inputs:
      - rss: { url: '{?streams.1.url1?}', silent: yes, all_entries: no }
      - rss: { url: '{?streams.1.url2?}', silent: yes, all_entries: no }
    regexp:
      accept: [ '{?streams.1.regexp?}': { from: title } ]
    set: { path: '{?streams.1.path?}' }
    exec:
      on_output:
        for_accepted:
          - |
            growlnotify -t 'Flexget' \
              -m 'Added {{task}} stream: {{title | re_replace("['']", "")}}' \
              >/dev/null 2>&1 \
            && \
            youtube-dl -o '{{path}}/%(title)s-%(id)s.%(ext)s' '{{url}}' \
              -f 'best[ext=mp4]' >/dev/null 2>&1 \
            && \
            growlnotify -t 'Flexget' \
              -m 'Completed {{task}} stream: {{title | re_replace("['']", "")}}' \
              >/dev/null 2>&1
