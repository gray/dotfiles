# warnings off

secrets: private/secrets.yml

templates:
  global:
    cookies: ~/.flexget/private/cookies.sqlite
    download: ~/Downloads/.
    no_entries_ok: yes
    verify_ssl_certificates: no

  torrents:
    content_filter:
      require: [ '*.avi', '*.mkv', '*.mp4', '*.rar' ]
      reject: [ '*.m2ts' ]
    torrent_scrub: on
    torrent_alive: { min_seeds: 5, reject_for: 10 minutes }
    exec:
      on_output:
        phase: |
          # This is also run from cron every few minutes.
          nice -n 20 transmission-watchdog

  private-torrents:
    template: torrents
    private_torrents: yes

  tv:
    interval: 5 minutes
    content_size: { min: 25, max: 2500 }
    regexp:
      reject:
        # Avoid certain groups (re-encoders and poor encoders).
        - ? '(?x) [\W_] (?: afg | jah | msd | sva | viethd | pimp4003
                          | (\{?)c[_ ]p\1 | kcrt | nogr(?:ou)?p ) [\W_]* $'
          : { from: title }
    if:
      # Episode 0 is often not a pilot.
      - '[1, 0] == [series_season, series_episode]':
          regexp:
            reject:
              - ? '(?x) (?:_|\b) (?: preview | sneak \W+  peek | trailer
                                   | behind \W+ the \W+ scenes
                                   | first \W+ look | making \W+ of )
                        (?:_|\b)'
                : { from: title }
      # Flexget doesn't reject really old episodes for date-based series,
      # so reject them here.
      - '"date" == series_id_type and 120 <= (now - series_date).days': reject
      # Require subs for foreign series, avoid them otherwise.
      - 'path.startswith("~/Media/TV/Foreign/")':
          regexp:
            reject_excluding: [ '(?x) \b sub(?:s|bed) \b': { from: title } ]
      - 'not path.startswith("~/Media/TV/Foreign/")':
          regexp:
            reject: [ '(?x) \b sub(?:s|bed) \b': { from: title } ]

  tv-series:
    template: tv
    series:
      settings:
        tv: &TV_SETTING
          quality: hdtv+ <=720p
          target: <720p
          timeframe: 2 hours
          propers: 12 hours
          specials: no
          path: ~/Media/TV/{{series_name}}/.
        animation:
          <<: *TV_SETTING
          path: ~/Media/TV/Animation/{{series_name}}/.
        documentaries:
          <<: *TV_SETTING
          path: ~/Media/TV/Documentaries/{{series_name}}/.
        foreign:
          <<: *TV_SETTING
          path: ~/Media/TV/Foreign/{{series_name}}/.
        talk_shows:
          <<: *TV_SETTING
          path: ~/Media/TV/Talk Shows/{{series_name}}/.
    include: [ private/series.yml ]
    if:
      # Reject season previews or recaps. Accept specials.
      - '"ep" == series_id_type and 0 == series_episode':
          regexp:
            reject_excluding:
              # The series plugin doesn't mark episodes as specials.
              - '(?x) [\W_] special [\W_]': { from: title }

  # Grab the first episode of any new series.
  tv-premieres:
    template: tv
    series_premiere:
      <<: *TV_SETTING
      allow_seasonless: yes
      quality: webrip+ <=720p
      timeframe: 6 hours
      path: ~/Media/TV/_NEW_/.
    regexp:
      reject:
        - '(?x) (?:_|\b) (?: au | nz | pl | uk | n[fh]l | ufc | wwe | sports
                             | championships? | 24(?:h|-7) | bak(e|ing)
                             | world\W+series | live\W+at )
                (?:_|\b)'
        - '(?x) chefs?'
        - '(?x) (?:_|\b) (?: brit(?:s | ish | ain | annic?a)? | england
                             | australia | kitchen | food | cook | tattoo )'
        - '(?x) (?:_|\b) (?: pdtv | norwegian | hanrel ) (?:_|\b)':
            from: title
      from: series_name

  movies:
    interval: 30 minutes
    quality: dvdrip+ <=720p
    regexp:
      reject:
        - '(?x) [\W_] (?: read[\W_]*nfo | 3-?D(?:BD)? | live\W+at
                          | fan[\W_]edit )
                  (?:_|\b)'
        - ? '(?x) [\W_] (?: dubbed | pldub | cropped | (?:heb|kor|swe)sub
                            | ro[ds]ubbed )
                  (?:_|\b)'
          : { from: [ title, description ] }
        # Avoid certain groups.
        - '(?x) [\W_] (?: maxspeed | tnt[\W_]*village | cocain | wdr | msd
                          | nnd | thc | ssdd | crys | nogr(?:ou)?p | evo | ift
                          | play[sx]d | aqos | santi ) [\W_]* $'
        # Flexget doesn't recognize cam or line audio as qualities.
        - '(?x) [\W_] (?: cam[\W_]*audio | line(?:[\W_]*audio)? ) (?:_|\b)'
      from: title
    content_size: { min: 300, max: 2500 }
    imdb_lookup: yes
    imdb_required: yes
    seen_movies: strict
    if:
      - 'imdb_year < now.year - 6': reject
      - "'musical' in (imdb_genres or [])": reject
      - "['music'] == (imdb_genres or [])": reject
      - ? "'music' in (imdb_genres or []) and
            any([i in (imdb_genres or []) for i in ('biography', 'documentary')])"
        : reject
      - "['documentary', 'sport'] == (imdb_genres or [])": reject
      # Probably a standup comedy.
      - "'comedy' in (imdb_genres or []) and 1 == len(imdb_actors or [])": reject
      - "'english' == (imdb_languages or ['english'])[0]":
          set: { path: ~/Media/Movies/. }
          imdb:
            min_score: 6.2
            min_votes: 500
      - '1 < len(imdb_languages or [])':
          set: { path: ~/Media/Movies/Foreign/. }
      - "'documentary' in (imdb_genres or [])":
          set: { path: ~/Media/Movies/Documentaries/. }
      - "'english' != (imdb_languages or ['english'])[0]":
          set:
            path: ~/Media/Movies/Foreign/{{imdb_languages[0] | capitalize}}/.
          imdb:
            min_score: 6.8
            min_votes: 100
            accept_languages: [
              cantonese, chinese, danish, dutch, french, german, hebrew,
              icelandic, italian, norwegian, japanese, korean, mandarin,
              portuguese, spanish, swedish
            ]
            accept_genres: [
              action, adventure, comedy, crime, mystery, sci-fi, thriller, war
            ]
          content_filter:
            reject: [ '*.subs.rar-missing' ]

  streams:
    disable: download
    exec:
      fail_entries: yes

tasks:
  ###########
  # TV series
  ###########
  btn:
    priority: 1
    include: [ private/btn-rss.yml ]
    template: [ private-torrents, tv-series ]
    manipulate:
      # Use the scene release name.
      - title: { extract: '.*  \[ (.+?) \] *$' }
    # Site doesn't distinguish between dvd and dvd screeners.
    regexp:
      reject:
        - '(?x) \b dvdrip \b': { from: title }
  xspeeds_tv:
    priority: 2
    include: [ private/xspeeds_tv-rss.yml ]
    template: [ private-torrents, tv-series ]
    # Only accept scene torrents here- members have no quality standards.
    regexp:
      reject_excluding:
        - '^XSbot': { from: author }
  torrentday_tv:
    priority: 3
    include: [ private/torrentday_tv-rss.yml ]
    template: [ private-torrents, tv-series ]
    manipulate:
      - title:
          replace: { regexp: '\b\W*no\s*rars?\W*$', format: '' }

  #####################
  # TV series premieres
  #####################
  btn_premieres:
    priority: 20
    include: [ private/btn-rss.yml ]
    template: [ private-torrents, tv-premieres ]
    manipulate:
      - year: { from: title, extract: '^[^[]+\[ (\d{4}) \]' }
      # Use the scene release name.
      - title: { extract: '.*  \[ (.+?) \] *$' }
    regexp:
      reject:
        # Site doesn't distinguish between dvd and dvd screeners.
        - '(?x) \b dvdrip \b': { from: title }
        - '(?x) [\W_] kor $': { from: title }
        - ? '(?x) \b (?: anime | celebrities | children | cooking | dance
              | dating | fashion | food | gameshow | homeandgarden | lifestyle
              | music | soap | sport ) \b'
          : { from: comments }
        - '(?x) ^ \W* (?: reality | sports ) \W* $': { from: comments }
    if:
      # Accept only the current year, respecting dates near the boundary.
      - ? 'not str(year).isdigit() or int(year) not in
            [(now + timedelta(days=n)).year for n in (0, -60, 60)]'
        :  reject
  xspeeds_tv_premieres:
    manual: yes
    priority: 21
    include: [ private/xspeeds_tv-rss.yml ]
    template: [ private-torrents, tv-premieres ]
    # Only accept scene torrents here- members have no quality standards.
    regexp:
      reject_excluding:
        - '(?x) ^ XSbot $': { from: author }
  torrentday_tv_premieres:
    manual: yes
    priority: 22
    include: [ private/torrentday_tv-rss.yml ]
    template: [ private-torrents, tv-premieres ]
    manipulate:
      - title:
          replace: { regexp: '\b\W*no\s*rars?\W*$', format: '' }

  ########
  # Movies
  ########
  xspeeds_movies:
    priority: 31
    include: [ private/xspeeds_movies-rss.yml ]
    template: [ private-torrents, movies ]
    # Only accept scene torrents here- members often mislabel.
    regexp:
      reject_excluding:
        - '(?x) ^ XSbot $': { from: author }
  torrentday_movies:
    priority: 32
    include: [ private/torrentday_movies-rss.yml ]
    template: [ private-torrents, movies ]
    manipulate:
      - title:
          replace: { regexp: '\b\W*no\s*rars?\W*$', format: '' }
  ptp:
    priority: 33
    include: [ private/ptp-rss.yml ]
    template: [ private-torrents, movies ]
    regexp:
      reject:
        - '/ Extras\b' : { from: title }

  ##########
  # Streams
  ##########
  '{{secrets.streams.1.task}}':
    interval: 1 hour
    template: streams
    inputs:
      - rss: { url: '{{secrets.streams.1.url1}}', silent: yes, all_entries: no }
      - rss: { url: '{{secrets.streams.1.url2}}', silent: yes, all_entries: no }
    regexp:
      accept: [ '{{secrets.streams.1.regexp}}': { from: title } ]
    set: { path: '{{secrets.streams.1.path}}' }
    exec:
      on_output:
        for_accepted:
          - |
            growlnotify -t 'Flexget' \
              -m 'Added {{task}} stream: {{title | re_replace("['']", "")}}' \
              >/dev/null 2>&1 \
            && \
            youtube-dl -f 'bestvideo[ext=mp4][width<900]+bestaudio/best[ext=mp4][width<900]' \
              -o '{{path}}/%(title)s-%(id)s.%(ext)s' '{{url}}' >/dev/null 2>&1 \
            && \
            growlnotify -t 'Flexget' \
              -m 'Completed {{task}} stream: {{title | re_replace("['']", "")}}' \
              >/dev/null 2>&1
